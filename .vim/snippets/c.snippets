## Main
# main
snippet main "main(int, char**) {}"
	int main(int argc, const char* argv[])
	{
		${0}
		return 0;
	}
# main(void)
snippet mainn "main() {}"
	int main(void)
	{
		${0}
		return 0;
	}
##
## Preprocessor
snippet inc "#include "filename.h""
	#include "${1:name.h}"
snippet Inc "#include <stdio.h>"
	#include <${1:stdio.h}>
snippet ndef "#ifndef #define #endif"
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
snippet def "#define"
	#define
snippet ifdef "#ifdef #define #endif"
	#ifdef ${1:FOO}
	${2:#define }
	#endif
snippet #if "#if #endif"
	#if ${1:FOO}
		${0}
	#endif
snippet guard "#pragma once"
	#pragma once

	${0}
snippet once "#ifndef UNTITLED_H"
	#ifndef ${1:UNTITLED_H}
	#define $1

	${0}

	#endif /* end of include guard: $1 */

##
## Control Statements
# if
snippet if "if() {}"
	if(${1:/* condition */})
	{
		${2}
	}
# else
snippet el "else {}"
	else
	{
		${1}
	}
# else if
snippet elif "else if() {}"
	else if (${1:/* condition */})
	{
		${2}
	}
# ternary
snippet t " ? : "
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch "switch() {}"
	switch(${1:/* variable */})
	{
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
	}
# case
snippet case "case :"
	case ${1:/* variable case */}:
		${2}
		${3:break;}
##
## Loops
# for
snippet for "for() {}"
	for(${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4}
	}
# while
snippet wh "while() {}"
	while (${1:/* condition */})
	{
		${2}
	}
# do... while
snippet do "do {} while()"
	do
	{
		${2}
	} while(${1:/* condition */});
##
## Functions
# function definition
snippet fun "void fn() {}"
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
# function declaration
snippet fund "void fn();"
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td "typedef"
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st "sturct"
	struct ${1:Struct}
	{
		${2:/* data */}
	};
# enum
snippet en
	enum ${1:Enum}
	{
		${2:/* data */}
	};
##
## Input/Output
# printf
snippet pr "printf()"
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr "fprintf()"
	fprintf(${1:stderr}, "${2:%s}\n"${3});
# getopt
snippet getopt "getopt"
	int choice;
	while(1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{ "verbose",	no_argument,	&verbose_flag, 'V' }*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{ "version", no_argument,	0,	'v' },
			{ "help",	no_argument,	0,	'h' },
			${1}
			{ 0,0,0,0 }
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long(argc, argv, "vh", long_options, &option_index);
		if(choice == -1)
		{
			break;
		}

		switch(choice)
		{
		case 'v':
			${2}
			break;

		case 'h':
			${3}
			break;

		case '?':
			/* getopt_long will have already printed an error */
			break;

		default:
			/* Not sure how to get here... */
			return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if(optind < argc)
	{
		while(optind < argc)
		{
			${0}
		}
	}

