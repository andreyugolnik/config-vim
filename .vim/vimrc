scriptencoding utf-8
" ^^ Please leave the above line at the start of the file.

"" ----------------------------------------------------------------------------
""
"" Andrey A. Ugolnik / _Andrey_
""
"" ----------------------------------------------------------------------------

" --- Use vim settings, rather then vi settings (much better!) ----------------
" --- This must be first, because it changes other options as a side effect ---
set nocompatible

let s:MSWindows = has('win95') + has('win16') + has('win32') + has('win64') + has('win32unix') + has('win64unix')

" on Windows use .vim instead vimfiles
if s:MSWindows
    set runtimepath=$HOME/.vim
    set runtimepath+=$VIM/vimfiles
    set runtimepath+=$VIMRUNTIME
    set runtimepath+=$VIM/vimfiles/after
    set runtimepath+=$HOME/.vim/after
endif

if has('vim_starting')
    if s:MSWindows
        lan mes en_EN.UTF-8
        set langmenu=en_EN.UTF-8
    endif
endif

" -----------------------------------------------------------------------------
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    au VimEnter * PlugInstall
endif

" --- disable detection, plugins and indenting in one step --------------------
filetype off

call plug#begin('~/.vim/bundle')

Plug 'itchyny/lightline.vim'

if s:MSWindows
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
    Plug 'Shougo/neocomplete.vim'
    Plug 'ctrlpvim/ctrlp.vim'
else
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'junegunn/fzf', { 'dir': '~/tools/fzf', 'do': './install --all --no-zsh --no-fish' }
    Plug 'junegunn/fzf.vim'
endif

Plug 'Valloric/ListToggle' " toggle the display of the location and quickfix windows
Plug 'scrooloose/nerdcommenter'
Plug 'qpkorr/vim-bufkill' " delete buffer without killing windows layout
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'Chiel92/vim-autoformat'
Plug 'vim-scripts/renamer.vim'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'vim-scripts/spacehi.vim'
Plug 'vim-scripts/TaskList.vim'
Plug 'SirVer/ultisnips'
Plug 'tikhomirov/vim-glsl', { 'for': ['glsl'] }
Plug 'dart-lang/dart-vim-plugin', { 'for': ['dart'] }
Plug 'endel/actionscript.vim', { 'for': ['actionscript'] }
Plug 'noahfrederick/vim-skeleton', { 'for': ['c','cpp','objc','objcpp'] }
Plug 'justinmk/vim-syntax-extra'
" Plug 'scrooloose/syntastic', { 'for': ['c','cpp','objc','objcpp'] }
" Plug 'arecarn/crunch.vim' " calculate math with looser syntax support
" Plug 'tpope/vim-eunuch'
" Plug 'Valloric/MatchTagAlways' " always highlights the enclosing html/xml tags.
" Plug 'jceb/vim-orgmode'

" Plug 'tpope/vim-dispatch'
" Plug 'drmikehenry/vim-fixkey'
"Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"Plug 'idanarye/vim-vebugger', { 'for': ['c','cpp','objc','objcpp'] }
"Plug 'jeaye/color_coded', { 'do': 'cmake . && make && make install' }
"Plug 'derekwyatt/vim-protodef', { 'for': ['c','cpp'] }
"Plug 'derekwyatt/vim-fswitch', { 'for': ['c','cpp','objc','objcpp'] }
"Plug 'mtth/scratch.vim'
"Plug 'DoxygenToolkit.vim'

call plug#end()

" --- enable detection, plugins and indenting in one step ---------------------
filetype plugin indent on

" -----------------------------------------------------------------------------

if !has('gui_running')
    set t_Co=256
    set termguicolors
endif

" --- font used in Gvim -------------------------------------------------------
if has("gui_running")
    set guioptions-=T " disable toolbar
    set guioptions-=l " disable left scroolbar
    set guioptions-=L " disable left scroolbar
    set guioptions-=r " disable right scroolbar
    set guioptions-=R " disable right scroolbar
    set guioptions-=m " remove menubar
    set guioptions+=c " use console dialogs instead of popup dialogs for simple choices.
    set guioptions-=e " disable gui tabs

    " Русский текст для теста начертания символов
    if has("gui_macvim")
        set guifont=Menlo:h18
    elseif s:MSWindows
        set guifont=lucida_console:h14:cRUSSIAN
    else
        set guifont=Droid\ Sans\ Mono\ 12
    endif
endif

if has("termguicolors")
    set termguicolors
endif

" colorscheme Tomorrow-Night
" colorscheme Tomorrow-Night-Eighties


let g:material_theme_style = 'dark'
colorscheme material

syntax on               " allow syntax highlighting

set title               " change the terminal's title
set showcmd             " display incomplete commands
set nobackup
set nowritebackup
set noswapfile
set viminfo='100,<50,s10,h,n~/.vim/viminfo
set autoread            " W11: autoread file after it changed outside vim

set nomodeline

" highlight whitespaces in a convenient way
set list
"set listchars=tab:→\ ,trail:·,extends:»,nbsp:·,eol:¶
set listchars=tab:→\ ,trail:·,extends:»,nbsp:·
let c_space_errors=1    " Highlight any spaces before tabs, and any whitespace at the end of a line
set showmode            " always show what mode we're currently editing in
set hidden              " hides buffers instead of closing them
set switchbuf=useopen   " reveal already opened files from the quickfix window
                        " instead of opening new buffers
set nowrap              " don't wrap lines
set backspace=indent,eol,start          " allow backspacing over everything in insert mode
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search pattern is all lowercase, case-sensitive otherwise
set incsearch           " show search matches as you type
set encoding=utf-8
set fencs=utf-8,ucs-bom,cp1251   " порядок перебора кодировок при открытии файла
set ffs=unix,dos        " порядок перебора fileformats
set cscopetag           " по Ctrl+] вести себя так же, как по g] (показывать варианты)
set lazyredraw          " don't update the display while executing macros
set tabstop=4           " number of spaces a <Tab> in the text stands for
set shiftwidth=4        " number of spaces used for each step of (auto)indent
set shiftround          " use multiple of shiftwidth when indenting with '<' and '>'
set expandtab           " expand <Tab> to spaces in Insert mode
set autoindent          " automatically set the indent of a new line
set copyindent          " copy the previous indentation on autoindenting
set smartindent         " do clever autoindenting
set cindent             " enable specific indenting for C code
"set showfulltag         " When completing by tag, show the whole tag, not just the function name
set diffopt+=iwhite     " Add ignorance of whitespace to diff
set smarttab            " insert tabs on the start of a line according to shiftwidth, not tabstop
set cino+=:0            " case: indent
set cino+=g0            " public: indent
" set cino+=N-s           " no namespace indent
set cino+=t0            " function return declaration
set cino+=(0            " unclosed prarntheses
set cino+=j1,(0,ws,Ws   " enable partial c++11 (lambda) support
"set cursorline          " highlight current line
set number              " show the line number for each line
"set mouse=a             " have the mouse enabled all the time
set formatoptions-=t    " don't auto-indent plaintext
set history=1024        " keep N lines of command history
set cc=81,101
set ruler               " show the cursor position all the time
set hlsearch            " highlight searches
" set showmatch           " проверка скобок
let g:loaded_matchparen=1
set foldmethod=marker
"set foldopen&
"set foldclose=all
set popt+=syntax:y      " syntax when printing
set pastetoggle=<F10>   " mode that allow to paste text from clipboard without formating
set scrolloff=5         " rows number to show while scrolling
set laststatus=2        " always show status line
set noshowmode          " lightline: remove '-- INSERT --'
if $TMUX == ''
    set clipboard=unnamedplus,unnamed
endif

" complete options (disable preview scratch window)
"set completeopt=menuone,menu,longest,preview
set completeopt=menu,menuone,longest
set pumheight=15        " Limit popup menu height

" --- additional tags ---------------------------------------------------------
set tags+=./tags

" --- force filetype for some files -------------------------------------------
au BufNewFile,BufRead *.m set filetype=objc
au BufNewFile,BufRead *.mm set filetype=objcpp
au BufNewFile,BufRead *.ino set filetype=cpp
au BufNewFile,BufRead *.as set filetype=actionscript
au BufNewFile,BufRead *.vsh,*.fsh set filetype=glsl

" --- higlight word under cursor ----------------------------------------------
" augroup AutoHighlight
    " au!
    " au CursorHold * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
    " setlocal updatetime=300
" augroup END

" --- enable cursor line only for current buffer ------------------------------
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au VimEnter,WinEnter,BufWinEnter *.xml setlocal nocursorline
    au WinLeave * setlocal nocursorline
augroup END

" --- higlight redundant tabs / spaces ----------------------------------------
au BufNewFile,BufReadPost,FilterReadPost,FileReadPost,Syntax * SpaceHi
au FileType help NoSpaceHi

" --- switch to us keyboard layout when insert mode leaved --------------------
au InsertLeave *
            \ if has('unix') && &term == 'builtin_gui' |
            \   silent !qdbus ru.gentoo.KbddService /ru/gentoo/KbddService ru.gentoo.kbdd.set_layout 0 >/dev/null |
            \ endif

" --- always jump to the last cursor position "  ------------------------------
au BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \    exe "normal g'\"" |
            \ endif

" --- redraw window at startup because lazyredraw prevent screen redraw -------
au VimEnter * redraw

" --- persistent undo ---------------------------------------------------------
if v:version >= 703
    let s:undodir=$HOME.'/.vim/undofiles'

    if !isdirectory(s:undodir)
        call mkdir(s:undodir, 'p', 0700)
    endif

    set undofile " enable persistent undo
    let &undodir=s:undodir
endif
" -----------------------------------------------------------------------------



" --- ex command for toggling hex mode - define mapping if desired ------------
map <silent><F5> <Esc>:Hexmode<CR>

command! -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function! ToggleHex()
    " hex mode should be considered a read-only operation
    " save values for modified and read-only for restoration later,
    " and clear the read-only flag for now
    let l:modified=&mod
    let l:oldreadonly=&readonly
    let &readonly=0
    let l:oldmodifiable=&modifiable
    let &modifiable=1
    if !exists("b:editHex") || !b:editHex
        " save old options
        let b:oldft=&ft
        let b:oldbin=&bin
        " set new options
        setlocal binary " make sure it overrides any textwidth, etc.
        let &ft="xxd"
        " set status
        let b:editHex=1
        " switch to hex editor
        %!xxd
    else
        " restore old options
        let &ft=b:oldft
        if !b:oldbin
            setlocal nobinary
        endif
        " set status
        let b:editHex=0
        " return to normal editing
        %!xxd -r
    endif
    " restore values for modified and read only state
    let &mod=l:modified
    let &readonly=l:oldreadonly
    let &modifiable=l:oldmodifiable
endfunction

" --- folding -----------------------------------------------------------------
"nnoremap <Space> za
"vnoremap <Space> za

" --- new undo sequence on enter ----------------------------------------------
" inoremap <CR> <c-g>u<CR>

" --- use jk as <Esc> ---------------------------------------------------------
" inoremap jk <Esc>

" --- delete current buffer ---------------------------------------------------
nnoremap <leader>D :BD<CR>

" --- clean trailing whitespace -----------------------------------------------
nmap <silent> <leader>W :silent! %s/\s\+$//<CR>:let @/=''<CR>

" --- toggle word under cursor ------------------------------------------------
" nnoremap <leader>tw :ToggleWord<CR>

" --- clears the search register ----------------------------------------------
nmap <silent> <leader><space> :nohlsearch<CR>

" --- disable arrow keys ------------------------------------------------------
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
vnoremap <up> <nop>
vnoremap <down> <nop>
vnoremap <left> <nop>
vnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" --- navigate in command mode ------------------------------------------------
" cnoremap <C-p> <Up>
" cnoremap <C-n> <Down>

" --- useful movement in wrap mode --------------------------------------------
nnoremap j gj
nnoremap k gk

" --- перемещение по элементам в quickfix -------------------------------------
" nnoremap <C-J> :cn<CR>zvzz:cc<CR>
" nnoremap <C-K> :cp<CR>zvzz:cc<CR>

" --- simplified window navigation --------------------------------------------
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" --- FZF related config ------------------------------------------------------
nnoremap <C-p> :FzfFiles<CR>
nnoremap <space> :FzfBuffers<CR>

if has("popupwin")
    let g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.7, 'border': 'horizontal' } }
endif
let g:fzf_command_prefix = 'Fzf'
let g:fzf_history_dir = $HOME.'/.vim/fzf-history'
let g:fzf_tags_command = 'ctags -R --sort=yes --c++-kinds=+p --fields=+liaS --extra=+q'

let $FZF_DEFAULT_OPTS="--inline-info"

" if executable('ag')
    " let $FZF_DEFAULT_COMMAND = 'ag -l -g "" -Q -t'
" endif
if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --vimgrep
                \ --iglob \!*.png
                \ --iglob \!*.jpg
                \ --iglob \!*.psd
                \ --iglob \!*.ico
                \ --iglob \!*.wav
                \ --iglob \!*.ogg
                \ --iglob \!*.mp3
                \ --iglob \!*.ttf
                \ --iglob \!*.bin
                \ --iglob \!*.jar
                \ --iglob \!*.jks
                \ --iglob \!*.so'
endif

" --- show / hide the line number for each line -------------------------------
imap <F1> <Esc>:set<Space>nu!<CR>a
nmap <F1>      :set<Space>nu!<CR>

" --- show / hide TagBar window ----------------------------------------------
nnoremap <leader>tb :TagbarToggle<CR>

" --- show / hide NERDTree window ---------------------------------------------
" map <S-F2> <Esc>:NERDTreeToggle<CR>

" --- toggles the quickfix window ---------------------------------------------
" map <silent><F2> <Esc>:QFix<CR>

" let g:jah_Quickfix_Win_Height = 10

" command! -bang -nargs=? QFix call QFixToggle(<bang>0)

" function! QFixToggle(forced)
    " if exists("g:qfix_win") && a:forced == 0
        " cclose
    " else
        " " if !exists("g:loaded_dispatch")
            " execute "copen " . g:jah_Quickfix_Win_Height
        " " else
        " " execute "Copen!"
    " " endif
    " endif
" endfunction

" " used to track the quickfix window
" augroup QFixToggle
    " au!
    " au BufWinEnter quickfix let g:qfix_win = bufnr("$")
    " au BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
" augroup END
" -----------------------------------------------------------------------------

" --- grep using ripgrep -----------------------------------------------------------
if executable('rg')
    let g:ackprg = 'rg --vimgrep'
endif

" --- search world under cursor in all files with current ext -----------------
map <F4> <Esc>:GrepWordInFiles<CR>:cw<CR>
command! GrepWordInFiles :call s:GrepInFiles()
function! s:GrepInFiles()
    let s:word = expand("<cword>")
    let s:cft = &filetype

    if s:cft == "cpp" || s:cft == "c" || s:cft == "objc" || s:cft == "objcpp"
        let s:mask = "-t cpp -t objcpp -t objc"
    else
        " let s:ext = expand("%:e")
        " let s:mask = "*" . (s:ext == "" ? "" : ".") . s:ext . " **/*" . (s:ext == "" ? "" : ".") . s:ext
        let s:mask = ""
    endif

    execute "Ack! " . s:mask . " " . s:word
endfunction

" --- apell checking ----------------------------------------------------------
"map <F7> :w!<CR>:!aspell -c --encoding=utf-8 --lang=ru %<CR>:e! %<CR>

" --- Makefile support --------------------------------------------------------
if has("mac")
    map <C-F9> <Esc>:make! osx<CR>
elseif s:MSWindows
    map <C-F9> <Esc>:make! win<CR>
else
    map <C-F9> <Esc>:make! linux<CR>
endif

map <C-F10> :make! run<CR>

" --- switch header / release -------------------------------------------------
" map <F11> <Esc>:A<CR>
map <F11> <Esc>:CocCommand clangd.switchSourceHeader<CR>

" --- create tags -------------------------------------------------------------
map <C-F12> <Esc>:MakeTags<CR>
command! MakeTags call MakeTagsFunction()
function! MakeTagsFunction()
    if executable('/usr/local/bin/ctags')
        !/usr/local/bin/ctags -R --sort=yes --c++-kinds=+p --fields=+liaS --extra=+q .
    else
        !ctags -R --sort=yes --c++-kinds=+p --fields=+liaS --extra=+q .
    endif
endfunction

" --- automaticaly insert a closing parenthesis when typing an opening --------
" --- parenthesis  ------------------------------------------------------------
"inoremap { {<CR>}<Esc>O
"inoremap ( ()<Esc>i
"inoremap [ []<Esc>i



" --- show encoding menu by F8 ------------------------------------------------
set wildmenu
set wcm=<Tab>
menu Encoding.utf-8        :e ++enc=utf-8 <CR>
menu Encoding.ucs-bom      :e ++enc=ucs-bom<CR>
menu Encoding.windows-1251 :e ++enc=cp1251<CR>
menu Encoding.koi8-r       :e ++enc=koi8-r<CR>
menu Encoding.ibm-866      :e ++enc=ibm866<CR>
map <F8> :emenu Encoding.<TAB>



" -----------------------------------------------------------------------------
"  common config
" -----------------------------------------------------------------------------
let Grep_Skip_Dirs = '.git .svn CVS .sass-cache'
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------

source $HOME/.vim/settings/coc.vim
source $HOME/.vim/settings/lightline.vim
source $HOME/.vim/settings/vim-autoformat.vim
" source $HOME/.vim/settings/ctrlp.vim
" source $HOME/.vim/settings/ycm.vim
" source $HOME/.vim/settings/syntastic.vim
" source $HOME/.vim/settings/a.vim



" -----------------------------------------------------------------------------
" UltiSnips related config
" -----------------------------------------------------------------------------
" let g:UltiSnipsExpandTrigger       = '<C-\>'
" let g:UltiSnipsEnableSnipMate      = 1
" let g:UltiSnipsSnippetsDir         = $HOME.'/.vim/snippets'
"let g:UltiSnipsJumpForwardTrigger  = '<c-j>'
"let g:UltiSnipsJumpBackwardTrigger = '<c-k>'
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  Task List related config
" -----------------------------------------------------------------------------
let g:tlTokenList                 = ['todo', 'fixme']
let Tlist_Auto_Update             = 1
let Tlist_Close_On_Select         = 1
let Tlist_Exit_OnlyWindow         = 1
let Tlist_GainFocus_On_ToggleOpen = 1
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
" NERDCommenter related config
" -----------------------------------------------------------------------------
let g:NERDSpaceDelims = 1
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
" manpageview related options
" -----------------------------------------------------------------------------
let g:manpageview_options      = '-a'
let g:manpageview_multimanpage = 1
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  TagBar related config
" -----------------------------------------------------------------------------
let g:tagbar_left      = 1
let g:tagbar_width     = 30
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_compact   = 1
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
" doxygentoolkit related config
" -----------------------------------------------------------------------------
let g:DoxygenToolkit_authorName = "Andrey A. Ugolnik"
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  ErrorMarker related config
" -----------------------------------------------------------------------------
let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
" Java error format support by walker from LOR
" -----------------------------------------------------------------------------
set efm^=\ %#[javac]\ %#%f:%l:\ %m
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  Man related config
" -----------------------------------------------------------------------------
runtime! ftplugin/man.vim
let g:ft_man_open_mode = 'tab'
set keywordprg=:Man
au FileType man setlocal nolist nonumber
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  Man related config
" -----------------------------------------------------------------------------
" started In Diff-Mode set diffexpr (plugin not loaded yet)
if &diff
    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
endif
" -----------------------------------------------------------------------------



" -----------------------------------------------------------------------------
"  netrw related config
" -----------------------------------------------------------------------------
let g:netrw_banner       = 0 " disable annoying banner
let g:netrw_altv         = 1 " open splits to the right
let g:netrw_altfile      = 1 " return to last browsing buffer
let g:netrw_liststyle    = 3 " tree view
let g:netrw_list_hide    = netrw_gitignore#Hide()
let g:netrw_list_hide   .= ',\(^\|\s\s\)\zs\.\S\+'
autocmd FileType netrw setl bufhidden=delete
" -----------------------------------------------------------------------------
